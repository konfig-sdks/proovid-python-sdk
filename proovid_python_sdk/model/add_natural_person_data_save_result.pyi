# coding: utf-8

"""
    Proovid Electronic Verification

    Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 

    The version of the OpenAPI document: v1
    Contact: info@proovid.com
    Created by: http://www.proovid.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from proovid_python_sdk import schemas  # noqa: F401


class AddNaturalPersonDataSaveResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def naturalPersonAdded() -> typing.Type['BaseResponse']:
                return BaseResponse
        
            @staticmethod
            def idDocumentSaved() -> typing.Type['BaseResponse']:
                return BaseResponse
        
            @staticmethod
            def livenessCheckURL() -> typing.Type['StringBaseResponse']:
                return StringBaseResponse
        
            @staticmethod
            def faceSaved() -> typing.Type['BaseResponse']:
                return BaseResponse
        
            @staticmethod
            def addressDocumentSaved() -> typing.Type['BaseResponse']:
                return BaseResponse
        
            @staticmethod
            def verificationStarted() -> typing.Type['BaseResponse']:
                return BaseResponse
            allSucceeded = schemas.BoolSchema
            __annotations__ = {
                "naturalPersonAdded": naturalPersonAdded,
                "idDocumentSaved": idDocumentSaved,
                "livenessCheckURL": livenessCheckURL,
                "faceSaved": faceSaved,
                "addressDocumentSaved": addressDocumentSaved,
                "verificationStarted": verificationStarted,
                "allSucceeded": allSucceeded,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["naturalPersonAdded"]) -> 'BaseResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idDocumentSaved"]) -> 'BaseResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["livenessCheckURL"]) -> 'StringBaseResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["faceSaved"]) -> 'BaseResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressDocumentSaved"]) -> 'BaseResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verificationStarted"]) -> 'BaseResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allSucceeded"]) -> MetaOapg.properties.allSucceeded: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["naturalPersonAdded", "idDocumentSaved", "livenessCheckURL", "faceSaved", "addressDocumentSaved", "verificationStarted", "allSucceeded", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["naturalPersonAdded"]) -> typing.Union['BaseResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idDocumentSaved"]) -> typing.Union['BaseResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["livenessCheckURL"]) -> typing.Union['StringBaseResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["faceSaved"]) -> typing.Union['BaseResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressDocumentSaved"]) -> typing.Union['BaseResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verificationStarted"]) -> typing.Union['BaseResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allSucceeded"]) -> typing.Union[MetaOapg.properties.allSucceeded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["naturalPersonAdded", "idDocumentSaved", "livenessCheckURL", "faceSaved", "addressDocumentSaved", "verificationStarted", "allSucceeded", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        naturalPersonAdded: typing.Union['BaseResponse', schemas.Unset] = schemas.unset,
        idDocumentSaved: typing.Union['BaseResponse', schemas.Unset] = schemas.unset,
        livenessCheckURL: typing.Union['StringBaseResponse', schemas.Unset] = schemas.unset,
        faceSaved: typing.Union['BaseResponse', schemas.Unset] = schemas.unset,
        addressDocumentSaved: typing.Union['BaseResponse', schemas.Unset] = schemas.unset,
        verificationStarted: typing.Union['BaseResponse', schemas.Unset] = schemas.unset,
        allSucceeded: typing.Union[MetaOapg.properties.allSucceeded, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AddNaturalPersonDataSaveResult':
        return super().__new__(
            cls,
            *args,
            naturalPersonAdded=naturalPersonAdded,
            idDocumentSaved=idDocumentSaved,
            livenessCheckURL=livenessCheckURL,
            faceSaved=faceSaved,
            addressDocumentSaved=addressDocumentSaved,
            verificationStarted=verificationStarted,
            allSucceeded=allSucceeded,
            _configuration=_configuration,
            **kwargs,
        )

from proovid_python_sdk.model.base_response import BaseResponse
from proovid_python_sdk.model.string_base_response import StringBaseResponse
