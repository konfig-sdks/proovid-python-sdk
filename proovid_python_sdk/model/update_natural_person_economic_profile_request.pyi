# coding: utf-8

"""
    Proovid Electronic Verification

    Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 

    The version of the OpenAPI document: v1
    Contact: info@proovid.com
    Created by: http://www.proovid.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from proovid_python_sdk import schemas  # noqa: F401


class UpdateNaturalPersonEconomicProfileRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class mainBusinessActivities(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mainBusinessActivities':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def sizeOfAnnualIncome() -> typing.Type['EMoneyRange']:
                return EMoneyRange
            
            
            class sizeOfAnnualIncomeMin(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sizeOfAnnualIncomeMin':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sizeOfAnnualIncomeMax(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sizeOfAnnualIncomeMax':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def mainSourceOfIncome() -> typing.Type['ESourceOfIncomeAnswers']:
                return ESourceOfIncomeAnswers
        
            @staticmethod
            def sizeOfWealth() -> typing.Type['EWealthRange']:
                return EWealthRange
            
            
            class sizeOfWealthMin(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sizeOfWealthMin':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sizeOfWealthMax(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sizeOfWealthMax':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            isHnwi = schemas.BoolSchema
        
            @staticmethod
            def sourceOfWealth() -> typing.Type['ESourceOfWealthAnswers']:
                return ESourceOfWealthAnswers
            
            
            class expectedOriginOfOutgoingFunds(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'expectedOriginOfOutgoingFunds':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class expectedOriginOfIncomingFunds(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'expectedOriginOfIncomingFunds':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class natureOfTransaction(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'natureOfTransaction':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def anticipatedAccountTurnOver() -> typing.Type['EMoneyRange']:
                return EMoneyRange
            
            
            class anticipatedAccountTurnOverMin(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'anticipatedAccountTurnOverMin':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class anticipatedAccountTurnOverMax(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'anticipatedAccountTurnOverMax':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class purposeOfBusinessRelationship(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'purposeOfBusinessRelationship':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "mainBusinessActivities": mainBusinessActivities,
                "sizeOfAnnualIncome": sizeOfAnnualIncome,
                "sizeOfAnnualIncomeMin": sizeOfAnnualIncomeMin,
                "sizeOfAnnualIncomeMax": sizeOfAnnualIncomeMax,
                "mainSourceOfIncome": mainSourceOfIncome,
                "sizeOfWealth": sizeOfWealth,
                "sizeOfWealthMin": sizeOfWealthMin,
                "sizeOfWealthMax": sizeOfWealthMax,
                "isHnwi": isHnwi,
                "sourceOfWealth": sourceOfWealth,
                "expectedOriginOfOutgoingFunds": expectedOriginOfOutgoingFunds,
                "expectedOriginOfIncomingFunds": expectedOriginOfIncomingFunds,
                "natureOfTransaction": natureOfTransaction,
                "anticipatedAccountTurnOver": anticipatedAccountTurnOver,
                "anticipatedAccountTurnOverMin": anticipatedAccountTurnOverMin,
                "anticipatedAccountTurnOverMax": anticipatedAccountTurnOverMax,
                "purposeOfBusinessRelationship": purposeOfBusinessRelationship,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mainBusinessActivities"]) -> MetaOapg.properties.mainBusinessActivities: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sizeOfAnnualIncome"]) -> 'EMoneyRange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sizeOfAnnualIncomeMin"]) -> MetaOapg.properties.sizeOfAnnualIncomeMin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sizeOfAnnualIncomeMax"]) -> MetaOapg.properties.sizeOfAnnualIncomeMax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mainSourceOfIncome"]) -> 'ESourceOfIncomeAnswers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sizeOfWealth"]) -> 'EWealthRange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sizeOfWealthMin"]) -> MetaOapg.properties.sizeOfWealthMin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sizeOfWealthMax"]) -> MetaOapg.properties.sizeOfWealthMax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isHnwi"]) -> MetaOapg.properties.isHnwi: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceOfWealth"]) -> 'ESourceOfWealthAnswers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expectedOriginOfOutgoingFunds"]) -> MetaOapg.properties.expectedOriginOfOutgoingFunds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expectedOriginOfIncomingFunds"]) -> MetaOapg.properties.expectedOriginOfIncomingFunds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["natureOfTransaction"]) -> MetaOapg.properties.natureOfTransaction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anticipatedAccountTurnOver"]) -> 'EMoneyRange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anticipatedAccountTurnOverMin"]) -> MetaOapg.properties.anticipatedAccountTurnOverMin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anticipatedAccountTurnOverMax"]) -> MetaOapg.properties.anticipatedAccountTurnOverMax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purposeOfBusinessRelationship"]) -> MetaOapg.properties.purposeOfBusinessRelationship: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mainBusinessActivities", "sizeOfAnnualIncome", "sizeOfAnnualIncomeMin", "sizeOfAnnualIncomeMax", "mainSourceOfIncome", "sizeOfWealth", "sizeOfWealthMin", "sizeOfWealthMax", "isHnwi", "sourceOfWealth", "expectedOriginOfOutgoingFunds", "expectedOriginOfIncomingFunds", "natureOfTransaction", "anticipatedAccountTurnOver", "anticipatedAccountTurnOverMin", "anticipatedAccountTurnOverMax", "purposeOfBusinessRelationship", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mainBusinessActivities"]) -> typing.Union[MetaOapg.properties.mainBusinessActivities, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sizeOfAnnualIncome"]) -> typing.Union['EMoneyRange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sizeOfAnnualIncomeMin"]) -> typing.Union[MetaOapg.properties.sizeOfAnnualIncomeMin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sizeOfAnnualIncomeMax"]) -> typing.Union[MetaOapg.properties.sizeOfAnnualIncomeMax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mainSourceOfIncome"]) -> typing.Union['ESourceOfIncomeAnswers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sizeOfWealth"]) -> typing.Union['EWealthRange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sizeOfWealthMin"]) -> typing.Union[MetaOapg.properties.sizeOfWealthMin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sizeOfWealthMax"]) -> typing.Union[MetaOapg.properties.sizeOfWealthMax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isHnwi"]) -> typing.Union[MetaOapg.properties.isHnwi, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceOfWealth"]) -> typing.Union['ESourceOfWealthAnswers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expectedOriginOfOutgoingFunds"]) -> typing.Union[MetaOapg.properties.expectedOriginOfOutgoingFunds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expectedOriginOfIncomingFunds"]) -> typing.Union[MetaOapg.properties.expectedOriginOfIncomingFunds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["natureOfTransaction"]) -> typing.Union[MetaOapg.properties.natureOfTransaction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anticipatedAccountTurnOver"]) -> typing.Union['EMoneyRange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anticipatedAccountTurnOverMin"]) -> typing.Union[MetaOapg.properties.anticipatedAccountTurnOverMin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anticipatedAccountTurnOverMax"]) -> typing.Union[MetaOapg.properties.anticipatedAccountTurnOverMax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purposeOfBusinessRelationship"]) -> typing.Union[MetaOapg.properties.purposeOfBusinessRelationship, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mainBusinessActivities", "sizeOfAnnualIncome", "sizeOfAnnualIncomeMin", "sizeOfAnnualIncomeMax", "mainSourceOfIncome", "sizeOfWealth", "sizeOfWealthMin", "sizeOfWealthMax", "isHnwi", "sourceOfWealth", "expectedOriginOfOutgoingFunds", "expectedOriginOfIncomingFunds", "natureOfTransaction", "anticipatedAccountTurnOver", "anticipatedAccountTurnOverMin", "anticipatedAccountTurnOverMax", "purposeOfBusinessRelationship", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        mainBusinessActivities: typing.Union[MetaOapg.properties.mainBusinessActivities, None, str, schemas.Unset] = schemas.unset,
        sizeOfAnnualIncome: typing.Union['EMoneyRange', schemas.Unset] = schemas.unset,
        sizeOfAnnualIncomeMin: typing.Union[MetaOapg.properties.sizeOfAnnualIncomeMin, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sizeOfAnnualIncomeMax: typing.Union[MetaOapg.properties.sizeOfAnnualIncomeMax, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mainSourceOfIncome: typing.Union['ESourceOfIncomeAnswers', schemas.Unset] = schemas.unset,
        sizeOfWealth: typing.Union['EWealthRange', schemas.Unset] = schemas.unset,
        sizeOfWealthMin: typing.Union[MetaOapg.properties.sizeOfWealthMin, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sizeOfWealthMax: typing.Union[MetaOapg.properties.sizeOfWealthMax, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        isHnwi: typing.Union[MetaOapg.properties.isHnwi, bool, schemas.Unset] = schemas.unset,
        sourceOfWealth: typing.Union['ESourceOfWealthAnswers', schemas.Unset] = schemas.unset,
        expectedOriginOfOutgoingFunds: typing.Union[MetaOapg.properties.expectedOriginOfOutgoingFunds, None, str, schemas.Unset] = schemas.unset,
        expectedOriginOfIncomingFunds: typing.Union[MetaOapg.properties.expectedOriginOfIncomingFunds, None, str, schemas.Unset] = schemas.unset,
        natureOfTransaction: typing.Union[MetaOapg.properties.natureOfTransaction, None, str, schemas.Unset] = schemas.unset,
        anticipatedAccountTurnOver: typing.Union['EMoneyRange', schemas.Unset] = schemas.unset,
        anticipatedAccountTurnOverMin: typing.Union[MetaOapg.properties.anticipatedAccountTurnOverMin, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        anticipatedAccountTurnOverMax: typing.Union[MetaOapg.properties.anticipatedAccountTurnOverMax, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        purposeOfBusinessRelationship: typing.Union[MetaOapg.properties.purposeOfBusinessRelationship, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateNaturalPersonEconomicProfileRequest':
        return super().__new__(
            cls,
            *args,
            mainBusinessActivities=mainBusinessActivities,
            sizeOfAnnualIncome=sizeOfAnnualIncome,
            sizeOfAnnualIncomeMin=sizeOfAnnualIncomeMin,
            sizeOfAnnualIncomeMax=sizeOfAnnualIncomeMax,
            mainSourceOfIncome=mainSourceOfIncome,
            sizeOfWealth=sizeOfWealth,
            sizeOfWealthMin=sizeOfWealthMin,
            sizeOfWealthMax=sizeOfWealthMax,
            isHnwi=isHnwi,
            sourceOfWealth=sourceOfWealth,
            expectedOriginOfOutgoingFunds=expectedOriginOfOutgoingFunds,
            expectedOriginOfIncomingFunds=expectedOriginOfIncomingFunds,
            natureOfTransaction=natureOfTransaction,
            anticipatedAccountTurnOver=anticipatedAccountTurnOver,
            anticipatedAccountTurnOverMin=anticipatedAccountTurnOverMin,
            anticipatedAccountTurnOverMax=anticipatedAccountTurnOverMax,
            purposeOfBusinessRelationship=purposeOfBusinessRelationship,
            _configuration=_configuration,
            **kwargs,
        )

from proovid_python_sdk.model.e_money_range import EMoneyRange
from proovid_python_sdk.model.e_source_of_income_answers import ESourceOfIncomeAnswers
from proovid_python_sdk.model.e_source_of_wealth_answers import ESourceOfWealthAnswers
from proovid_python_sdk.model.e_wealth_range import EWealthRange
