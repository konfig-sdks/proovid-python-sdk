# coding: utf-8

"""
    Proovid Electronic Verification

    Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 

    The version of the OpenAPI document: v1
    Contact: info@proovid.com
    Created by: http://www.proovid.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from proovid_python_sdk import schemas  # noqa: F401


class AmlRecord(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            
            
            class source(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'source':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class firstName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firstName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class middleName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'middleName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class lastName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lastName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class gender(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gender':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            status = schemas.Int32Schema
            
            
            class isDeath(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isDeath':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class dateOfBirth(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateOfBirth':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class placeOfBirth(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'placeOfBirth':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class urlReport(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'urlReport':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def categories() -> typing.Type['AmlRecordCategories']:
                return AmlRecordCategories
            
            
            class notes(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notes':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def sanctionsReferences() -> typing.Type['AmlRecordSanctionsReferences']:
                return AmlRecordSanctionsReferences
        
            @staticmethod
            def officialLists() -> typing.Type['AmlRecordOfficialLists']:
                return AmlRecordOfficialLists
        
            @staticmethod
            def importanDates() -> typing.Type['AmlRecordImportanDates']:
                return AmlRecordImportanDates
        
            @staticmethod
            def otherNames() -> typing.Type['AmlRecordOtherNames']:
                return AmlRecordOtherNames
        
            @staticmethod
            def idNumbers() -> typing.Type['AmlRecordIdNumbers']:
                return AmlRecordIdNumbers
        
            @staticmethod
            def associates() -> typing.Type['AmlRecordAssociates']:
                return AmlRecordAssociates
        
            @staticmethod
            def images() -> typing.Type['AmlRecordImages']:
                return AmlRecordImages
            
            
            class relatedPersons(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Associate']:
                        return Associate
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'relatedPersons':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            score = schemas.Float64Schema
            
            
            class entityType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'entityType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def filters() -> typing.Type['AmlRecordFilters']:
                return AmlRecordFilters
        
            @staticmethod
            def matchTypes() -> typing.Type['AmlRecordMatchTypes']:
                return AmlRecordMatchTypes
        
            @staticmethod
            def alternativeNames() -> typing.Type['AmlRecordAlternativeNames']:
                return AmlRecordAlternativeNames
        
            @staticmethod
            def sources() -> typing.Type['AmlRecordSources']:
                return AmlRecordSources
        
            @staticmethod
            def types() -> typing.Type['AmlRecordTypes']:
                return AmlRecordTypes
            
            
            class assets(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Asset']:
                        return Asset
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assets':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class media(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Media']:
                        return Media
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'media':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def fields() -> typing.Type['AmlRecordFields']:
                return AmlRecordFields
        
            @staticmethod
            def sourceNotes() -> typing.Type['AmlRecordSourceNotes']:
                return AmlRecordSourceNotes
            __annotations__ = {
                "id": id,
                "source": source,
                "firstName": firstName,
                "middleName": middleName,
                "lastName": lastName,
                "gender": gender,
                "status": status,
                "isDeath": isDeath,
                "dateOfBirth": dateOfBirth,
                "placeOfBirth": placeOfBirth,
                "urlReport": urlReport,
                "categories": categories,
                "notes": notes,
                "sanctionsReferences": sanctionsReferences,
                "officialLists": officialLists,
                "importanDates": importanDates,
                "otherNames": otherNames,
                "idNumbers": idNumbers,
                "associates": associates,
                "images": images,
                "relatedPersons": relatedPersons,
                "name": name,
                "score": score,
                "entityType": entityType,
                "filters": filters,
                "matchTypes": matchTypes,
                "alternativeNames": alternativeNames,
                "sources": sources,
                "types": types,
                "assets": assets,
                "media": media,
                "fields": fields,
                "sourceNotes": sourceNotes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDeath"]) -> MetaOapg.properties.isDeath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfBirth"]) -> MetaOapg.properties.dateOfBirth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["placeOfBirth"]) -> MetaOapg.properties.placeOfBirth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["urlReport"]) -> MetaOapg.properties.urlReport: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categories"]) -> 'AmlRecordCategories': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sanctionsReferences"]) -> 'AmlRecordSanctionsReferences': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["officialLists"]) -> 'AmlRecordOfficialLists': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importanDates"]) -> 'AmlRecordImportanDates': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherNames"]) -> 'AmlRecordOtherNames': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idNumbers"]) -> 'AmlRecordIdNumbers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associates"]) -> 'AmlRecordAssociates': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images"]) -> 'AmlRecordImages': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relatedPersons"]) -> MetaOapg.properties.relatedPersons: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityType"]) -> MetaOapg.properties.entityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filters"]) -> 'AmlRecordFilters': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matchTypes"]) -> 'AmlRecordMatchTypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alternativeNames"]) -> 'AmlRecordAlternativeNames': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sources"]) -> 'AmlRecordSources': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["types"]) -> 'AmlRecordTypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assets"]) -> MetaOapg.properties.assets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media"]) -> MetaOapg.properties.media: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> 'AmlRecordFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceNotes"]) -> 'AmlRecordSourceNotes': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "source", "firstName", "middleName", "lastName", "gender", "status", "isDeath", "dateOfBirth", "placeOfBirth", "urlReport", "categories", "notes", "sanctionsReferences", "officialLists", "importanDates", "otherNames", "idNumbers", "associates", "images", "relatedPersons", "name", "score", "entityType", "filters", "matchTypes", "alternativeNames", "sources", "types", "assets", "media", "fields", "sourceNotes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDeath"]) -> typing.Union[MetaOapg.properties.isDeath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfBirth"]) -> typing.Union[MetaOapg.properties.dateOfBirth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["placeOfBirth"]) -> typing.Union[MetaOapg.properties.placeOfBirth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["urlReport"]) -> typing.Union[MetaOapg.properties.urlReport, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> typing.Union['AmlRecordCategories', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sanctionsReferences"]) -> typing.Union['AmlRecordSanctionsReferences', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["officialLists"]) -> typing.Union['AmlRecordOfficialLists', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importanDates"]) -> typing.Union['AmlRecordImportanDates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherNames"]) -> typing.Union['AmlRecordOtherNames', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idNumbers"]) -> typing.Union['AmlRecordIdNumbers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associates"]) -> typing.Union['AmlRecordAssociates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images"]) -> typing.Union['AmlRecordImages', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relatedPersons"]) -> typing.Union[MetaOapg.properties.relatedPersons, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> typing.Union[MetaOapg.properties.score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityType"]) -> typing.Union[MetaOapg.properties.entityType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filters"]) -> typing.Union['AmlRecordFilters', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matchTypes"]) -> typing.Union['AmlRecordMatchTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alternativeNames"]) -> typing.Union['AmlRecordAlternativeNames', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sources"]) -> typing.Union['AmlRecordSources', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["types"]) -> typing.Union['AmlRecordTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assets"]) -> typing.Union[MetaOapg.properties.assets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media"]) -> typing.Union[MetaOapg.properties.media, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union['AmlRecordFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceNotes"]) -> typing.Union['AmlRecordSourceNotes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "source", "firstName", "middleName", "lastName", "gender", "status", "isDeath", "dateOfBirth", "placeOfBirth", "urlReport", "categories", "notes", "sanctionsReferences", "officialLists", "importanDates", "otherNames", "idNumbers", "associates", "images", "relatedPersons", "name", "score", "entityType", "filters", "matchTypes", "alternativeNames", "sources", "types", "assets", "media", "fields", "sourceNotes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, None, str, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, None, str, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, None, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, None, str, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, None, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        isDeath: typing.Union[MetaOapg.properties.isDeath, None, bool, schemas.Unset] = schemas.unset,
        dateOfBirth: typing.Union[MetaOapg.properties.dateOfBirth, None, str, datetime, schemas.Unset] = schemas.unset,
        placeOfBirth: typing.Union[MetaOapg.properties.placeOfBirth, None, str, schemas.Unset] = schemas.unset,
        urlReport: typing.Union[MetaOapg.properties.urlReport, None, str, schemas.Unset] = schemas.unset,
        categories: typing.Union['AmlRecordCategories', schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, None, str, schemas.Unset] = schemas.unset,
        sanctionsReferences: typing.Union['AmlRecordSanctionsReferences', schemas.Unset] = schemas.unset,
        officialLists: typing.Union['AmlRecordOfficialLists', schemas.Unset] = schemas.unset,
        importanDates: typing.Union['AmlRecordImportanDates', schemas.Unset] = schemas.unset,
        otherNames: typing.Union['AmlRecordOtherNames', schemas.Unset] = schemas.unset,
        idNumbers: typing.Union['AmlRecordIdNumbers', schemas.Unset] = schemas.unset,
        associates: typing.Union['AmlRecordAssociates', schemas.Unset] = schemas.unset,
        images: typing.Union['AmlRecordImages', schemas.Unset] = schemas.unset,
        relatedPersons: typing.Union[MetaOapg.properties.relatedPersons, list, tuple, None, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
        score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        entityType: typing.Union[MetaOapg.properties.entityType, None, str, schemas.Unset] = schemas.unset,
        filters: typing.Union['AmlRecordFilters', schemas.Unset] = schemas.unset,
        matchTypes: typing.Union['AmlRecordMatchTypes', schemas.Unset] = schemas.unset,
        alternativeNames: typing.Union['AmlRecordAlternativeNames', schemas.Unset] = schemas.unset,
        sources: typing.Union['AmlRecordSources', schemas.Unset] = schemas.unset,
        types: typing.Union['AmlRecordTypes', schemas.Unset] = schemas.unset,
        assets: typing.Union[MetaOapg.properties.assets, list, tuple, None, schemas.Unset] = schemas.unset,
        media: typing.Union[MetaOapg.properties.media, list, tuple, None, schemas.Unset] = schemas.unset,
        fields: typing.Union['AmlRecordFields', schemas.Unset] = schemas.unset,
        sourceNotes: typing.Union['AmlRecordSourceNotes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AmlRecord':
        return super().__new__(
            cls,
            *args,
            id=id,
            source=source,
            firstName=firstName,
            middleName=middleName,
            lastName=lastName,
            gender=gender,
            status=status,
            isDeath=isDeath,
            dateOfBirth=dateOfBirth,
            placeOfBirth=placeOfBirth,
            urlReport=urlReport,
            categories=categories,
            notes=notes,
            sanctionsReferences=sanctionsReferences,
            officialLists=officialLists,
            importanDates=importanDates,
            otherNames=otherNames,
            idNumbers=idNumbers,
            associates=associates,
            images=images,
            relatedPersons=relatedPersons,
            name=name,
            score=score,
            entityType=entityType,
            filters=filters,
            matchTypes=matchTypes,
            alternativeNames=alternativeNames,
            sources=sources,
            types=types,
            assets=assets,
            media=media,
            fields=fields,
            sourceNotes=sourceNotes,
            _configuration=_configuration,
            **kwargs,
        )

from proovid_python_sdk.model.aml_record_alternative_names import AmlRecordAlternativeNames
from proovid_python_sdk.model.aml_record_associates import AmlRecordAssociates
from proovid_python_sdk.model.aml_record_categories import AmlRecordCategories
from proovid_python_sdk.model.aml_record_fields import AmlRecordFields
from proovid_python_sdk.model.aml_record_filters import AmlRecordFilters
from proovid_python_sdk.model.aml_record_id_numbers import AmlRecordIdNumbers
from proovid_python_sdk.model.aml_record_images import AmlRecordImages
from proovid_python_sdk.model.aml_record_importan_dates import AmlRecordImportanDates
from proovid_python_sdk.model.aml_record_match_types import AmlRecordMatchTypes
from proovid_python_sdk.model.aml_record_official_lists import AmlRecordOfficialLists
from proovid_python_sdk.model.aml_record_other_names import AmlRecordOtherNames
from proovid_python_sdk.model.aml_record_sanctions_references import AmlRecordSanctionsReferences
from proovid_python_sdk.model.aml_record_source_notes import AmlRecordSourceNotes
from proovid_python_sdk.model.aml_record_sources import AmlRecordSources
from proovid_python_sdk.model.aml_record_types import AmlRecordTypes
from proovid_python_sdk.model.asset import Asset
from proovid_python_sdk.model.associate import Associate
from proovid_python_sdk.model.media import Media
