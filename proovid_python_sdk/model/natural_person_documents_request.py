# coding: utf-8

"""
    Proovid Electronic Verification

    Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 

    The version of the OpenAPI document: v1
    Contact: info@proovid.com
    Created by: http://www.proovid.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from proovid_python_sdk import schemas  # noqa: F401


class NaturalPersonDocumentsRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def idDocument() -> typing.Type['NaturalPersonIdDocumentRequest']:
                return NaturalPersonIdDocumentRequest
        
            @staticmethod
            def addressDocument() -> typing.Type['NaturalPersonDocumentRequest']:
                return NaturalPersonDocumentRequest
            __annotations__ = {
                "idDocument": idDocument,
                "addressDocument": addressDocument,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idDocument"]) -> 'NaturalPersonIdDocumentRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressDocument"]) -> 'NaturalPersonDocumentRequest': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idDocument", "addressDocument", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idDocument"]) -> typing.Union['NaturalPersonIdDocumentRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressDocument"]) -> typing.Union['NaturalPersonDocumentRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idDocument", "addressDocument", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        idDocument: typing.Union['NaturalPersonIdDocumentRequest', schemas.Unset] = schemas.unset,
        addressDocument: typing.Union['NaturalPersonDocumentRequest', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NaturalPersonDocumentsRequest':
        return super().__new__(
            cls,
            *args,
            idDocument=idDocument,
            addressDocument=addressDocument,
            _configuration=_configuration,
            **kwargs,
        )

from proovid_python_sdk.model.natural_person_document_request import NaturalPersonDocumentRequest
from proovid_python_sdk.model.natural_person_id_document_request import NaturalPersonIdDocumentRequest
