# coding: utf-8

"""
    Proovid Electronic Verification

    Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 

    The version of the OpenAPI document: v1
    Contact: info@proovid.com
    Created by: http://www.proovid.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from proovid_python_sdk import schemas  # noqa: F401


class UpdateNaturalPersonInfoRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class clientReferenceId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clientReferenceId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class taxId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'taxId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class firstName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firstName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class lastName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lastName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class middleName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'middleName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class legalName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'legalName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class dateOfBirth(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateOfBirth':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def gender() -> typing.Type['EGender']:
                return EGender
            
            
            class countryBirth(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'countryBirth':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class countryResidence(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'countryResidence':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class countryMainBusiness(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'countryMainBusiness':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class nationality(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nationality':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class email(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'email':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class emailTwo(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'emailTwo':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class mobilePhone(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mobilePhone':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class mobilePhoneTwo(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mobilePhoneTwo':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class automaticallyUpdateNPRisk(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'automaticallyUpdateNPRisk':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def riskLevel() -> typing.Type['EScore']:
                return EScore
            
            
            class riskLevelJustification(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'riskLevelJustification':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            isFlagged = schemas.BoolSchema
            
            
            class comments(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'comments':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def economicProfile() -> typing.Type['UpdateNaturalPersonEconomicProfileRequest']:
                return UpdateNaturalPersonEconomicProfileRequest
            __annotations__ = {
                "clientReferenceId": clientReferenceId,
                "taxId": taxId,
                "firstName": firstName,
                "lastName": lastName,
                "middleName": middleName,
                "legalName": legalName,
                "dateOfBirth": dateOfBirth,
                "gender": gender,
                "countryBirth": countryBirth,
                "countryResidence": countryResidence,
                "countryMainBusiness": countryMainBusiness,
                "nationality": nationality,
                "email": email,
                "emailTwo": emailTwo,
                "mobilePhone": mobilePhone,
                "mobilePhoneTwo": mobilePhoneTwo,
                "automaticallyUpdateNPRisk": automaticallyUpdateNPRisk,
                "riskLevel": riskLevel,
                "riskLevelJustification": riskLevelJustification,
                "isFlagged": isFlagged,
                "comments": comments,
                "economicProfile": economicProfile,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientReferenceId"]) -> MetaOapg.properties.clientReferenceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxId"]) -> MetaOapg.properties.taxId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalName"]) -> MetaOapg.properties.legalName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfBirth"]) -> MetaOapg.properties.dateOfBirth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> 'EGender': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryBirth"]) -> MetaOapg.properties.countryBirth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryResidence"]) -> MetaOapg.properties.countryResidence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryMainBusiness"]) -> MetaOapg.properties.countryMainBusiness: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nationality"]) -> MetaOapg.properties.nationality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailTwo"]) -> MetaOapg.properties.emailTwo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobilePhone"]) -> MetaOapg.properties.mobilePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobilePhoneTwo"]) -> MetaOapg.properties.mobilePhoneTwo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["automaticallyUpdateNPRisk"]) -> MetaOapg.properties.automaticallyUpdateNPRisk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskLevel"]) -> 'EScore': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskLevelJustification"]) -> MetaOapg.properties.riskLevelJustification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isFlagged"]) -> MetaOapg.properties.isFlagged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["economicProfile"]) -> 'UpdateNaturalPersonEconomicProfileRequest': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clientReferenceId", "taxId", "firstName", "lastName", "middleName", "legalName", "dateOfBirth", "gender", "countryBirth", "countryResidence", "countryMainBusiness", "nationality", "email", "emailTwo", "mobilePhone", "mobilePhoneTwo", "automaticallyUpdateNPRisk", "riskLevel", "riskLevelJustification", "isFlagged", "comments", "economicProfile", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientReferenceId"]) -> typing.Union[MetaOapg.properties.clientReferenceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxId"]) -> typing.Union[MetaOapg.properties.taxId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalName"]) -> typing.Union[MetaOapg.properties.legalName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfBirth"]) -> typing.Union[MetaOapg.properties.dateOfBirth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union['EGender', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryBirth"]) -> typing.Union[MetaOapg.properties.countryBirth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryResidence"]) -> typing.Union[MetaOapg.properties.countryResidence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryMainBusiness"]) -> typing.Union[MetaOapg.properties.countryMainBusiness, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nationality"]) -> typing.Union[MetaOapg.properties.nationality, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailTwo"]) -> typing.Union[MetaOapg.properties.emailTwo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobilePhone"]) -> typing.Union[MetaOapg.properties.mobilePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobilePhoneTwo"]) -> typing.Union[MetaOapg.properties.mobilePhoneTwo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["automaticallyUpdateNPRisk"]) -> typing.Union[MetaOapg.properties.automaticallyUpdateNPRisk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskLevel"]) -> typing.Union['EScore', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskLevelJustification"]) -> typing.Union[MetaOapg.properties.riskLevelJustification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isFlagged"]) -> typing.Union[MetaOapg.properties.isFlagged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["economicProfile"]) -> typing.Union['UpdateNaturalPersonEconomicProfileRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clientReferenceId", "taxId", "firstName", "lastName", "middleName", "legalName", "dateOfBirth", "gender", "countryBirth", "countryResidence", "countryMainBusiness", "nationality", "email", "emailTwo", "mobilePhone", "mobilePhoneTwo", "automaticallyUpdateNPRisk", "riskLevel", "riskLevelJustification", "isFlagged", "comments", "economicProfile", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        clientReferenceId: typing.Union[MetaOapg.properties.clientReferenceId, None, str, schemas.Unset] = schemas.unset,
        taxId: typing.Union[MetaOapg.properties.taxId, None, str, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, None, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, None, str, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, None, str, schemas.Unset] = schemas.unset,
        legalName: typing.Union[MetaOapg.properties.legalName, None, str, schemas.Unset] = schemas.unset,
        dateOfBirth: typing.Union[MetaOapg.properties.dateOfBirth, None, str, datetime, schemas.Unset] = schemas.unset,
        gender: typing.Union['EGender', schemas.Unset] = schemas.unset,
        countryBirth: typing.Union[MetaOapg.properties.countryBirth, None, str, schemas.Unset] = schemas.unset,
        countryResidence: typing.Union[MetaOapg.properties.countryResidence, None, str, schemas.Unset] = schemas.unset,
        countryMainBusiness: typing.Union[MetaOapg.properties.countryMainBusiness, None, str, schemas.Unset] = schemas.unset,
        nationality: typing.Union[MetaOapg.properties.nationality, None, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, None, str, schemas.Unset] = schemas.unset,
        emailTwo: typing.Union[MetaOapg.properties.emailTwo, None, str, schemas.Unset] = schemas.unset,
        mobilePhone: typing.Union[MetaOapg.properties.mobilePhone, None, str, schemas.Unset] = schemas.unset,
        mobilePhoneTwo: typing.Union[MetaOapg.properties.mobilePhoneTwo, None, str, schemas.Unset] = schemas.unset,
        automaticallyUpdateNPRisk: typing.Union[MetaOapg.properties.automaticallyUpdateNPRisk, None, bool, schemas.Unset] = schemas.unset,
        riskLevel: typing.Union['EScore', schemas.Unset] = schemas.unset,
        riskLevelJustification: typing.Union[MetaOapg.properties.riskLevelJustification, None, str, schemas.Unset] = schemas.unset,
        isFlagged: typing.Union[MetaOapg.properties.isFlagged, bool, schemas.Unset] = schemas.unset,
        comments: typing.Union[MetaOapg.properties.comments, None, str, schemas.Unset] = schemas.unset,
        economicProfile: typing.Union['UpdateNaturalPersonEconomicProfileRequest', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateNaturalPersonInfoRequest':
        return super().__new__(
            cls,
            *args,
            clientReferenceId=clientReferenceId,
            taxId=taxId,
            firstName=firstName,
            lastName=lastName,
            middleName=middleName,
            legalName=legalName,
            dateOfBirth=dateOfBirth,
            gender=gender,
            countryBirth=countryBirth,
            countryResidence=countryResidence,
            countryMainBusiness=countryMainBusiness,
            nationality=nationality,
            email=email,
            emailTwo=emailTwo,
            mobilePhone=mobilePhone,
            mobilePhoneTwo=mobilePhoneTwo,
            automaticallyUpdateNPRisk=automaticallyUpdateNPRisk,
            riskLevel=riskLevel,
            riskLevelJustification=riskLevelJustification,
            isFlagged=isFlagged,
            comments=comments,
            economicProfile=economicProfile,
            _configuration=_configuration,
            **kwargs,
        )

from proovid_python_sdk.model.e_gender import EGender
from proovid_python_sdk.model.e_score import EScore
from proovid_python_sdk.model.update_natural_person_economic_profile_request import UpdateNaturalPersonEconomicProfileRequest
