# coding: utf-8

"""
    Proovid Electronic Verification

    Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 

    The version of the OpenAPI document: v1
    Contact: info@proovid.com
    Created by: http://www.proovid.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from proovid_python_sdk import schemas  # noqa: F401


class ShuftiAddressDataResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def info() -> typing.Type['Info']:
                return Info
            
            
            class reference(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reference':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class event(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'event':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def error() -> typing.Type['Error']:
                return Error
            
            
            class email(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'email':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class country(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'country':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def verificationData() -> typing.Type['VerificationData']:
                return VerificationData
        
            @staticmethod
            def verificationResult() -> typing.Type['VerificationResult']:
                return VerificationResult
            
            
            class declinedReason(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'declinedReason':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def declinedCodes() -> typing.Type['ShuftiAddressDataResponseDeclinedCodes']:
                return ShuftiAddressDataResponseDeclinedCodes
            __annotations__ = {
                "info": info,
                "reference": reference,
                "event": event,
                "error": error,
                "email": email,
                "country": country,
                "verificationData": verificationData,
                "verificationResult": verificationResult,
                "declinedReason": declinedReason,
                "declinedCodes": declinedCodes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["info"]) -> 'Info': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference"]) -> MetaOapg.properties.reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event"]) -> MetaOapg.properties.event: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> 'Error': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verificationData"]) -> 'VerificationData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verificationResult"]) -> 'VerificationResult': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declinedReason"]) -> MetaOapg.properties.declinedReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declinedCodes"]) -> 'ShuftiAddressDataResponseDeclinedCodes': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["info", "reference", "event", "error", "email", "country", "verificationData", "verificationResult", "declinedReason", "declinedCodes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["info"]) -> typing.Union['Info', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference"]) -> typing.Union[MetaOapg.properties.reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event"]) -> typing.Union[MetaOapg.properties.event, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union['Error', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verificationData"]) -> typing.Union['VerificationData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verificationResult"]) -> typing.Union['VerificationResult', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declinedReason"]) -> typing.Union[MetaOapg.properties.declinedReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declinedCodes"]) -> typing.Union['ShuftiAddressDataResponseDeclinedCodes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["info", "reference", "event", "error", "email", "country", "verificationData", "verificationResult", "declinedReason", "declinedCodes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        info: typing.Union['Info', schemas.Unset] = schemas.unset,
        reference: typing.Union[MetaOapg.properties.reference, None, str, schemas.Unset] = schemas.unset,
        event: typing.Union[MetaOapg.properties.event, None, str, schemas.Unset] = schemas.unset,
        error: typing.Union['Error', schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, None, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, None, str, schemas.Unset] = schemas.unset,
        verificationData: typing.Union['VerificationData', schemas.Unset] = schemas.unset,
        verificationResult: typing.Union['VerificationResult', schemas.Unset] = schemas.unset,
        declinedReason: typing.Union[MetaOapg.properties.declinedReason, None, str, schemas.Unset] = schemas.unset,
        declinedCodes: typing.Union['ShuftiAddressDataResponseDeclinedCodes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ShuftiAddressDataResponse':
        return super().__new__(
            cls,
            *args,
            info=info,
            reference=reference,
            event=event,
            error=error,
            email=email,
            country=country,
            verificationData=verificationData,
            verificationResult=verificationResult,
            declinedReason=declinedReason,
            declinedCodes=declinedCodes,
            _configuration=_configuration,
            **kwargs,
        )

from proovid_python_sdk.model.error import Error
from proovid_python_sdk.model.info import Info
from proovid_python_sdk.model.shufti_address_data_response_declined_codes import ShuftiAddressDataResponseDeclinedCodes
from proovid_python_sdk.model.verification_data import VerificationData
from proovid_python_sdk.model.verification_result import VerificationResult
