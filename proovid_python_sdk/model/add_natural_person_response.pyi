# coding: utf-8

"""
    Proovid Electronic Verification

    Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 

    The version of the OpenAPI document: v1
    Contact: info@proovid.com
    Created by: http://www.proovid.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from proovid_python_sdk import schemas  # noqa: F401


class AddNaturalPersonResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            
            
            class clientReferenceId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clientReferenceId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def documentImages() -> typing.Type['DocumentImages']:
                return DocumentImages
        
            @staticmethod
            def dataSaveResponses() -> typing.Type['AddNaturalPersonDataSaveResult']:
                return AddNaturalPersonDataSaveResult
        
            @staticmethod
            def verifications() -> typing.Type['SumSubVerificationResponse']:
                return SumSubVerificationResponse
            __annotations__ = {
                "id": id,
                "clientReferenceId": clientReferenceId,
                "documentImages": documentImages,
                "dataSaveResponses": dataSaveResponses,
                "verifications": verifications,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientReferenceId"]) -> MetaOapg.properties.clientReferenceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentImages"]) -> 'DocumentImages': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataSaveResponses"]) -> 'AddNaturalPersonDataSaveResult': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verifications"]) -> 'SumSubVerificationResponse': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "clientReferenceId", "documentImages", "dataSaveResponses", "verifications", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientReferenceId"]) -> typing.Union[MetaOapg.properties.clientReferenceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentImages"]) -> typing.Union['DocumentImages', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataSaveResponses"]) -> typing.Union['AddNaturalPersonDataSaveResult', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verifications"]) -> typing.Union['SumSubVerificationResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "clientReferenceId", "documentImages", "dataSaveResponses", "verifications", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        clientReferenceId: typing.Union[MetaOapg.properties.clientReferenceId, None, str, schemas.Unset] = schemas.unset,
        documentImages: typing.Union['DocumentImages', schemas.Unset] = schemas.unset,
        dataSaveResponses: typing.Union['AddNaturalPersonDataSaveResult', schemas.Unset] = schemas.unset,
        verifications: typing.Union['SumSubVerificationResponse', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AddNaturalPersonResponse':
        return super().__new__(
            cls,
            *args,
            id=id,
            clientReferenceId=clientReferenceId,
            documentImages=documentImages,
            dataSaveResponses=dataSaveResponses,
            verifications=verifications,
            _configuration=_configuration,
            **kwargs,
        )

from proovid_python_sdk.model.add_natural_person_data_save_result import AddNaturalPersonDataSaveResult
from proovid_python_sdk.model.document_images import DocumentImages
from proovid_python_sdk.model.sum_sub_verification_response import SumSubVerificationResponse
