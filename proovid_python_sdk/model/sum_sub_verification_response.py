# coding: utf-8

"""
    Proovid Electronic Verification

    Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 

    The version of the OpenAPI document: v1
    Contact: info@proovid.com
    Created by: http://www.proovid.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from proovid_python_sdk import schemas  # noqa: F401


class SumSubVerificationResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            creationDate = schemas.DateTimeSchema
        
            @staticmethod
            def screening() -> typing.Type['SumSubAmlVerificationResponse']:
                return SumSubAmlVerificationResponse
        
            @staticmethod
            def idDocument() -> typing.Type['SumSubDocumentVerificationVerificationResponse']:
                return SumSubDocumentVerificationVerificationResponse
        
            @staticmethod
            def face() -> typing.Type['SumSubDocumentVerificationVerificationResponse']:
                return SumSubDocumentVerificationVerificationResponse
        
            @staticmethod
            def addressDocument() -> typing.Type['SumSubDocumentVerificationVerificationResponse']:
                return SumSubDocumentVerificationVerificationResponse
            __annotations__ = {
                "creationDate": creationDate,
                "screening": screening,
                "idDocument": idDocument,
                "face": face,
                "addressDocument": addressDocument,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationDate"]) -> MetaOapg.properties.creationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["screening"]) -> 'SumSubAmlVerificationResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idDocument"]) -> 'SumSubDocumentVerificationVerificationResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["face"]) -> 'SumSubDocumentVerificationVerificationResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressDocument"]) -> 'SumSubDocumentVerificationVerificationResponse': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["creationDate", "screening", "idDocument", "face", "addressDocument", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationDate"]) -> typing.Union[MetaOapg.properties.creationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["screening"]) -> typing.Union['SumSubAmlVerificationResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idDocument"]) -> typing.Union['SumSubDocumentVerificationVerificationResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["face"]) -> typing.Union['SumSubDocumentVerificationVerificationResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressDocument"]) -> typing.Union['SumSubDocumentVerificationVerificationResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["creationDate", "screening", "idDocument", "face", "addressDocument", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        creationDate: typing.Union[MetaOapg.properties.creationDate, str, datetime, schemas.Unset] = schemas.unset,
        screening: typing.Union['SumSubAmlVerificationResponse', schemas.Unset] = schemas.unset,
        idDocument: typing.Union['SumSubDocumentVerificationVerificationResponse', schemas.Unset] = schemas.unset,
        face: typing.Union['SumSubDocumentVerificationVerificationResponse', schemas.Unset] = schemas.unset,
        addressDocument: typing.Union['SumSubDocumentVerificationVerificationResponse', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SumSubVerificationResponse':
        return super().__new__(
            cls,
            *args,
            creationDate=creationDate,
            screening=screening,
            idDocument=idDocument,
            face=face,
            addressDocument=addressDocument,
            _configuration=_configuration,
            **kwargs,
        )

from proovid_python_sdk.model.sum_sub_aml_verification_response import SumSubAmlVerificationResponse
from proovid_python_sdk.model.sum_sub_document_verification_verification_response import SumSubDocumentVerificationVerificationResponse
