# coding: utf-8

"""
    Proovid Electronic Verification

    Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 

    The version of the OpenAPI document: v1
    Contact: info@proovid.com
    Created by: http://www.proovid.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from proovid_python_sdk import schemas  # noqa: F401


class AmlReport(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class creationTime(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'creationTime':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class reviewedVerificationStatus(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reviewedVerificationStatus':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            numberOfRecords = schemas.Int32Schema
        
            @staticmethod
            def naturalPerson() -> typing.Type['NaturalPerson']:
                return NaturalPerson
            
            
            class amlRecords(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AmlRecord']:
                        return AmlRecord
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'amlRecords':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "creationTime": creationTime,
                "reviewedVerificationStatus": reviewedVerificationStatus,
                "numberOfRecords": numberOfRecords,
                "naturalPerson": naturalPerson,
                "amlRecords": amlRecords,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationTime"]) -> MetaOapg.properties.creationTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewedVerificationStatus"]) -> MetaOapg.properties.reviewedVerificationStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfRecords"]) -> MetaOapg.properties.numberOfRecords: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["naturalPerson"]) -> 'NaturalPerson': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amlRecords"]) -> MetaOapg.properties.amlRecords: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["creationTime", "reviewedVerificationStatus", "numberOfRecords", "naturalPerson", "amlRecords", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationTime"]) -> typing.Union[MetaOapg.properties.creationTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewedVerificationStatus"]) -> typing.Union[MetaOapg.properties.reviewedVerificationStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfRecords"]) -> typing.Union[MetaOapg.properties.numberOfRecords, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["naturalPerson"]) -> typing.Union['NaturalPerson', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amlRecords"]) -> typing.Union[MetaOapg.properties.amlRecords, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["creationTime", "reviewedVerificationStatus", "numberOfRecords", "naturalPerson", "amlRecords", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        creationTime: typing.Union[MetaOapg.properties.creationTime, None, str, datetime, schemas.Unset] = schemas.unset,
        reviewedVerificationStatus: typing.Union[MetaOapg.properties.reviewedVerificationStatus, None, str, schemas.Unset] = schemas.unset,
        numberOfRecords: typing.Union[MetaOapg.properties.numberOfRecords, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        naturalPerson: typing.Union['NaturalPerson', schemas.Unset] = schemas.unset,
        amlRecords: typing.Union[MetaOapg.properties.amlRecords, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AmlReport':
        return super().__new__(
            cls,
            *args,
            creationTime=creationTime,
            reviewedVerificationStatus=reviewedVerificationStatus,
            numberOfRecords=numberOfRecords,
            naturalPerson=naturalPerson,
            amlRecords=amlRecords,
            _configuration=_configuration,
            **kwargs,
        )

from proovid_python_sdk.model.aml_record import AmlRecord
from proovid_python_sdk.model.natural_person import NaturalPerson
