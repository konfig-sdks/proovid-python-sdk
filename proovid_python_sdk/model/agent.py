# coding: utf-8

"""
    Proovid Electronic Verification

    Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 

    The version of the OpenAPI document: v1
    Contact: info@proovid.com
    Created by: http://www.proovid.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from proovid_python_sdk import schemas  # noqa: F401


class Agent(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            isDesktop = schemas.BoolSchema
            isPhone = schemas.BoolSchema
            
            
            class useragent(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'useragent':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class deviceName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deviceName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class browserName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'browserName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class platformName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'platformName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "isDesktop": isDesktop,
                "isPhone": isPhone,
                "useragent": useragent,
                "deviceName": deviceName,
                "browserName": browserName,
                "platformName": platformName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDesktop"]) -> MetaOapg.properties.isDesktop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPhone"]) -> MetaOapg.properties.isPhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["useragent"]) -> MetaOapg.properties.useragent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceName"]) -> MetaOapg.properties.deviceName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browserName"]) -> MetaOapg.properties.browserName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platformName"]) -> MetaOapg.properties.platformName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isDesktop", "isPhone", "useragent", "deviceName", "browserName", "platformName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDesktop"]) -> typing.Union[MetaOapg.properties.isDesktop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPhone"]) -> typing.Union[MetaOapg.properties.isPhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["useragent"]) -> typing.Union[MetaOapg.properties.useragent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceName"]) -> typing.Union[MetaOapg.properties.deviceName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browserName"]) -> typing.Union[MetaOapg.properties.browserName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platformName"]) -> typing.Union[MetaOapg.properties.platformName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isDesktop", "isPhone", "useragent", "deviceName", "browserName", "platformName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        isDesktop: typing.Union[MetaOapg.properties.isDesktop, bool, schemas.Unset] = schemas.unset,
        isPhone: typing.Union[MetaOapg.properties.isPhone, bool, schemas.Unset] = schemas.unset,
        useragent: typing.Union[MetaOapg.properties.useragent, None, str, schemas.Unset] = schemas.unset,
        deviceName: typing.Union[MetaOapg.properties.deviceName, None, str, schemas.Unset] = schemas.unset,
        browserName: typing.Union[MetaOapg.properties.browserName, None, str, schemas.Unset] = schemas.unset,
        platformName: typing.Union[MetaOapg.properties.platformName, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Agent':
        return super().__new__(
            cls,
            *args,
            isDesktop=isDesktop,
            isPhone=isPhone,
            useragent=useragent,
            deviceName=deviceName,
            browserName=browserName,
            platformName=platformName,
            _configuration=_configuration,
            **kwargs,
        )
